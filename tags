!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/shadow/dev/C/shadotesting/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
ABUF_INIT	shado.c	/^#define ABUF_INIT /;"	d	file:
Block	shado.c	/^typedef struct Block {$/;"	s	file:
Block	shado.c	/^} Block;$/;"	t	typeref:struct:Block	file:
CC	Makefile	/^CC=gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS=-g -Wno-deprecated -Wall -Wextra -pedantic -std=c99 -pie -pedantic -static-libasan # -fsa/;"	m
CHAR_AZ09	shado.c	/^    CHAR_AZ09 = 0,$/;"	e	enum:char_type	file:
CHAR_NL	shado.c	/^    CHAR_NL,$/;"	e	enum:char_type	file:
CHAR_SYM	shado.c	/^    CHAR_SYM,$/;"	e	enum:char_type	file:
CHAR_WHITESPACE	shado.c	/^    CHAR_WHITESPACE,$/;"	e	enum:char_type	file:
CTRL_KEY	shado.c	/^#define CTRL_KEY(/;"	d	file:
Cursor	shado.c	/^struct Cursor {$/;"	s	file:
DEBUG	shado.c	/^#define DEBUG /;"	d	file:
E	shado.c	/^struct GlobalState E;$/;"	v	typeref:struct:GlobalState
GlobalState	shado.c	/^struct GlobalState {$/;"	s	file:
INSERT	shado.c	/^#define INSERT /;"	d	file:
LEN	shado.c	/^#define LEN(/;"	d	file:
MAX	rope.c	/^#define MAX(/;"	d	file:
MIN	rope.c	/^#define MIN(/;"	d	file:
MISC	shado.c	/^#define MISC /;"	d	file:
NEEDS_TWO_WCHARS	rope.c	/^#define NEEDS_TWO_WCHARS(/;"	d	file:
NORMAL	shado.c	/^#define NORMAL /;"	d	file:
REF_COUNT	rope.h	/^#define REF_COUNT /;"	d
REPLACE	shado.c	/^#define REPLACE /;"	d	file:
ROPE_BIAS	rope.h	/^#define ROPE_BIAS /;"	d
ROPE_FOREACH	rope.h	/^#define ROPE_FOREACH(/;"	d
ROPE_INVALID_UTF8	rope.h	/^typedef enum { ROPE_OK, ROPE_INVALID_UTF8 } ROPE_RESULT;$/;"	e	enum:__anon19e2dad10303
ROPE_MAX_HEIGHT	rope.h	/^#define ROPE_MAX_HEIGHT /;"	d
ROPE_NODE_STR_SIZE	rope.h	/^#define ROPE_NODE_STR_SIZE /;"	d
ROPE_OK	rope.h	/^typedef enum { ROPE_OK, ROPE_INVALID_UTF8 } ROPE_RESULT;$/;"	e	enum:__anon19e2dad10303
ROPE_RESULT	rope.h	/^typedef enum { ROPE_OK, ROPE_INVALID_UTF8 } ROPE_RESULT;$/;"	t	typeref:enum:__anon19e2dad10303
ROPE_SIZE	rope.c	/^static const size_t ROPE_SIZE = sizeof(rope) + sizeof(rope_node) * ROPE_MAX_HEIGHT;$/;"	v	typeref:typename:const size_t	file:
ROPE_WCHAR	rope.h	/^#define ROPE_WCHAR /;"	d
SHADO_VERSION	shado.c	/^#define SHADO_VERSION /;"	d	file:
SHELL	Makefile	/^SHELL=\/bin\/sh$/;"	m
TAB_STOP	shado.c	/^#define TAB_STOP /;"	d	file:
VISUAL	shado.c	/^#define VISUAL /;"	d	file:
_BSD_SOURCE	shado.c	/^#define _BSD_SOURCE$/;"	d	file:
_DEFAULT_SOURCE	shado.c	/^#define _DEFAULT_SOURCE$/;"	d	file:
_GNU_SOURCE	shado.c	/^#define _GNU_SOURCE$/;"	d	file:
__anon19e2dacc0108	rope.c	/^typedef struct {$/;"	s	file:
__anon19e2dad10108	rope.h	/^typedef struct {$/;"	s
__anon19e2dad10208	rope.h	/^typedef struct {$/;"	s
__anon19e2dad10303	rope.h	/^typedef enum { ROPE_OK, ROPE_INVALID_UTF8 } ROPE_RESULT;$/;"	g
_rope_check	rope.c	/^void _rope_check(rope *r) {$/;"	f	typeref:typename:void
_rope_print	rope.c	/^void _rope_print(rope *r) {$/;"	f	typeref:typename:void
abuf	shado.c	/^struct abuf {$/;"	s	file:
alloc	rope.h	/^  void *(*alloc)(size_t bytes);$/;"	m	struct:__anon19e2dad10208	typeref:typename:void * (*)(size_t bytes)
alloc_node	rope.c	/^static rope_node *alloc_node(rope *r, uint8_t height) {$/;"	f	typeref:typename:rope_node *	file:
b	shado.c	/^    char *b;$/;"	m	struct:abuf	typeref:typename:char *	file:
blk	shado.c	/^    Block* blk;$/;"	m	struct:GlobalState	typeref:typename:Block *	file:
bytelen_and_check_utf8	rope.c	/^static ssize_t bytelen_and_check_utf8(const uint8_t *str) {$/;"	f	typeref:typename:ssize_t	file:
ceil_page	shado.c	/^#define ceil_page(/;"	d	file:
char_type	shado.c	/^enum char_type {$/;"	g	file:
clean	Makefile	/^clean:$/;"	t
codepoint_size	rope.c	/^static inline size_t codepoint_size(uint8_t byte) {$/;"	f	typeref:typename:size_t	file:
coloff	shado.c	/^    int coloff;$/;"	m	struct:Cursor	typeref:typename:int	file:
container_of	rope.c	/^#define container_of(/;"	d	file:
count	shado.c	/^    int count;$/;"	m	struct:Block	typeref:typename:int	file:
count_bytes_in_utf8	rope.c	/^static size_t count_bytes_in_utf8(const uint8_t *str, size_t num_chars) {$/;"	f	typeref:typename:size_t	file:
count_utf8_in_wchars	rope.c	/^static size_t count_utf8_in_wchars(const uint8_t *str, size_t num_wchars) {$/;"	f	typeref:typename:size_t	file:
count_wchars_in_utf8	rope.c	/^static size_t count_wchars_in_utf8(const uint8_t *str, size_t num_chars) {$/;"	f	typeref:typename:size_t	file:
curs	shado.c	/^    struct Cursor curs;$/;"	m	struct:GlobalState	typeref:struct:Cursor	file:
cx	shado.c	/^    int cx, cy;$/;"	m	struct:Cursor	typeref:typename:int	file:
cy	shado.c	/^    int cx, cy;$/;"	m	struct:Cursor	typeref:typename:int	file:
dirty	shado.c	/^    int dirty;$/;"	m	struct:GlobalState	typeref:typename:int	file:
disable_raw	shado.c	/^void disable_raw () { \/\/ Restores on exit to terminal's orig attributes$/;"	f	typeref:typename:void
enable_raw	shado.c	/^void enable_raw () {$/;"	f	typeref:typename:void
erow	shado.c	/^typedef struct erow {$/;"	s	file:
erow	shado.c	/^} erow;$/;"	t	typeref:struct:erow	file:
filename	shado.c	/^    char *filename;$/;"	m	struct:GlobalState	typeref:typename:char *	file:
free	rope.h	/^  void (*free)(void *ptr);$/;"	m	struct:__anon19e2dad10208	typeref:typename:void (*)(void * ptr)
free_row	shado.c	/^void free_row (erow *row) {$/;"	f	typeref:typename:void
gdb	Makefile	/^gdb: shado$/;"	t
get_curs_pos	shado.c	/^int get_curs_pos (int *rows, int *cols) {$/;"	f	typeref:typename:int
get_win_size	shado.c	/^int get_win_size (int *rows, int *cols) {$/;"	f	typeref:typename:int
head	rope.h	/^  rope_node head;$/;"	m	struct:__anon19e2dad10208	typeref:typename:rope_node
height	rope.h	/^  uint8_t height;$/;"	m	struct:rope_node_t	typeref:typename:uint8_t
idx	shado.c	/^    int idx;$/;"	m	struct:erow	typeref:typename:int	file:
init	shado.c	/^void init () {$/;"	f	typeref:typename:void
insert_at	rope.c	/^static void insert_at(rope *r, rope_iter *iter,$/;"	f	typeref:typename:void	file:
insert_row	shado.c	/^void insert_row (int at, char *s, size_t len) {$/;"	f	typeref:typename:void
iter_at_char_pos	rope.c	/^static rope_node *iter_at_char_pos(rope *r, size_t char_pos, rope_iter *iter) {$/;"	f	typeref:typename:rope_node *	file:
iter_at_wchar_pos	rope.c	/^static rope_node *iter_at_wchar_pos(rope *r, size_t wchar_pos, rope_iter *iter) {$/;"	f	typeref:typename:rope_node *	file:
kill	shado.c	/^void kill (const char *s) {$/;"	f	typeref:typename:void
len	shado.c	/^    int len;$/;"	m	struct:abuf	typeref:typename:int	file:
librope_rope_h	rope.h	/^#define librope_rope_h$/;"	d
main	shado.c	/^int main (int argc, char *argv[]) {$/;"	f	typeref:typename:int
mode	shado.c	/^    int mode; \/* 0: normal, 1: insert, 2: visual, 3: visual_line, 4: visual_blk, 5: sreplace, 6/;"	m	struct:GlobalState	typeref:typename:int	file:
nexts	rope.h	/^  rope_skip_node nexts[];$/;"	m	struct:rope_node_t	typeref:typename:rope_skip_node[]
node	rope.h	/^  struct rope_node_t *node;$/;"	m	struct:__anon19e2dad10108	typeref:struct:rope_node_t *
node_size	rope.c	/^static size_t node_size(uint8_t height) {$/;"	f	typeref:typename:size_t	file:
num_bytes	rope.h	/^  size_t num_bytes;$/;"	m	struct:__anon19e2dad10208	typeref:typename:size_t
num_bytes	rope.h	/^  uint16_t num_bytes;$/;"	m	struct:rope_node_t	typeref:typename:uint16_t
num_chars	rope.h	/^  size_t num_chars;$/;"	m	struct:__anon19e2dad10208	typeref:typename:size_t
numrows	shado.c	/^    int numrows;$/;"	m	struct:GlobalState	typeref:typename:int	file:
open_file	shado.c	/^void open_file (char *filename) {$/;"	f	typeref:typename:void
orig_termios	shado.c	/^    struct termios orig_termios;$/;"	m	struct:GlobalState	typeref:struct:termios	file:
page_size	shado.c	/^#define page_size /;"	d	file:
print_flag	shado.c	/^    int print_flag; \/* Makes sure not to print escape code keys *\/$/;"	m	struct:GlobalState	typeref:typename:int	file:
quit	shado.c	/^void quit () {$/;"	f	typeref:typename:void
random	rope.c	/^inline static long random() {$/;"	f	typeref:typename:long	file:
random_height	rope.c	/^static uint8_t random_height() {$/;"	f	typeref:typename:uint8_t	file:
realloc	rope.h	/^  void *(*realloc)(void *ptr, size_t newsize);$/;"	m	struct:__anon19e2dad10208	typeref:typename:void * (*)(void * ptr,size_t newsize)
ref_count	rope.h	/^  int ref_count;$/;"	m	struct:rope_node_t	typeref:typename:int
ref_dec	rope.c	/^void ref_dec (rope_node *n) {$/;"	f	typeref:typename:void
ref_inc	rope.c	/^void ref_inc (rope_node *n) {$/;"	f	typeref:typename:void
render	shado.c	/^    char *render;$/;"	m	struct:erow	typeref:typename:char *	file:
rope	rope.h	/^} rope;$/;"	t	typeref:struct:__anon19e2dad10208
rope_append	rope.c	/^ROPE_RESULT rope_append (rope *r, const uint8_t *str) {$/;"	f	typeref:typename:ROPE_RESULT
rope_byte_count	rope.c	/^size_t rope_byte_count(const rope *r) {$/;"	f	typeref:typename:size_t
rope_char_count	rope.c	/^size_t rope_char_count(const rope *r) {$/;"	f	typeref:typename:size_t
rope_copy	rope.c	/^rope *rope_copy(const rope *other) {$/;"	f	typeref:typename:rope *
rope_create_cstr	rope.c	/^uint8_t *rope_create_cstr(rope *r) {$/;"	f	typeref:typename:uint8_t *
rope_del	rope.c	/^void rope_del(rope *r, size_t pos, size_t length) {$/;"	f	typeref:typename:void
rope_del_at_iter	rope.c	/^static void rope_del_at_iter(rope *r, rope_node *e, rope_iter *iter, size_t length) {$/;"	f	typeref:typename:void	file:
rope_del_at_wchar	rope.c	/^size_t rope_del_at_wchar(rope *r, size_t wchar_pos, size_t wchar_num, size_t *char_len_out) {$/;"	f	typeref:typename:size_t
rope_free	rope.c	/^void rope_free(rope *r) {$/;"	f	typeref:typename:void
rope_head	shado.c	/^    rope *rope_head;$/;"	m	struct:GlobalState	typeref:typename:rope *	file:
rope_insert	rope.c	/^ROPE_RESULT rope_insert(rope *r, size_t pos, const uint8_t *str) {$/;"	f	typeref:typename:ROPE_RESULT
rope_insert_at_iter	rope.c	/^static ROPE_RESULT rope_insert_at_iter(rope *r, rope_node *e, rope_iter *iter, const uint8_t *st/;"	f	typeref:typename:ROPE_RESULT	file:
rope_insert_at_wchar	rope.c	/^size_t rope_insert_at_wchar(rope *r, size_t wchar_pos, const uint8_t *str) {$/;"	f	typeref:typename:size_t
rope_iter	rope.c	/^} rope_iter;$/;"	t	typeref:struct:__anon19e2dacc0108	file:
rope_new	rope.c	/^rope *rope_new() {$/;"	f	typeref:typename:rope *
rope_new2	rope.c	/^rope *rope_new2(void *(*alloc)(size_t bytes),$/;"	f	typeref:typename:rope *
rope_new_with_utf8	rope.c	/^rope *rope_new_with_utf8(const uint8_t *str) {$/;"	f	typeref:typename:rope *
rope_node	rope.h	/^} rope_node;$/;"	t	typeref:struct:rope_node_t
rope_node_chars	rope.h	/^static inline size_t rope_node_chars(rope_node *n) {$/;"	f	typeref:typename:size_t
rope_node_data	rope.h	/^static inline uint8_t *rope_node_data(rope_node *n) {$/;"	f	typeref:typename:uint8_t *
rope_node_free	rope.c	/^static void rope_node_free (rope_node *n) {$/;"	f	typeref:typename:void	file:
rope_node_num_bytes	rope.h	/^static inline size_t rope_node_num_bytes(rope_node *n) {$/;"	f	typeref:typename:size_t
rope_node_t	rope.h	/^typedef struct rope_node_t {$/;"	s
rope_node_wchars	rope.h	/^static inline size_t rope_node_wchars(rope_node *n) {$/;"	f	typeref:typename:size_t
rope_skip_node	rope.h	/^} rope_skip_node;$/;"	t	typeref:struct:__anon19e2dad10108
rope_wchar_count	rope.c	/^size_t rope_wchar_count(rope *r) {$/;"	f	typeref:typename:size_t
rope_write_cstr	rope.c	/^size_t rope_write_cstr(rope *r, uint8_t *dest) {$/;"	f	typeref:typename:size_t
row	shado.c	/^    erow *row;$/;"	m	struct:GlobalState	typeref:typename:erow *	file:
rowoff	shado.c	/^    int rowoff;$/;"	m	struct:Cursor	typeref:typename:int	file:
run	Makefile	/^run: shado$/;"	t
rx	shado.c	/^    int rx;$/;"	m	struct:Cursor	typeref:typename:int	file:
s	rope.c	/^  rope_skip_node s[ROPE_MAX_HEIGHT];$/;"	m	struct:__anon19e2dacc0108	typeref:typename:rope_skip_node[]	file:
screencols	shado.c	/^    int screencols;$/;"	m	struct:GlobalState	typeref:typename:int	file:
screenrows	shado.c	/^    int screenrows;$/;"	m	struct:GlobalState	typeref:typename:int	file:
set_cursor_type	shado.c	/^void set_cursor_type () {$/;"	f	typeref:typename:void
shado	Makefile	/^shado: shado.c rope.c$/;"	t
size	shado.c	/^    int size;$/;"	m	struct:erow	typeref:typename:int	file:
skip_size	rope.h	/^  size_t skip_size;$/;"	m	struct:__anon19e2dad10108	typeref:typename:size_t
src	shado.c	/^    const uint8_t *src;$/;"	m	struct:Block	typeref:typename:const uint8_t *	file:
str	rope.h	/^  uint8_t str[ROPE_NODE_STR_SIZE];$/;"	m	struct:rope_node_t	typeref:typename:uint8_t[]
strlen_utf8	rope.c	/^static size_t strlen_utf8(const uint8_t *str) {$/;"	f	typeref:typename:size_t	file:
update_offset_list	rope.c	/^static void update_offset_list(rope *r, rope_iter *iter, size_t num_chars) {$/;"	f	typeref:typename:void	file:
update_offset_list	rope.c	/^static void update_offset_list(rope *r, rope_iter *iter, size_t num_chars, size_t num_wchars) {$/;"	f	typeref:typename:void	file:
valgrind	Makefile	/^valgrind: shado$/;"	t
wchar_size	rope.h	/^  size_t wchar_size;$/;"	m	struct:__anon19e2dad10108	typeref:typename:size_t
